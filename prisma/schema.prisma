// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  email String @unique
  name String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relacionamento Um para Muitos, 1 usuário pode ter multíplas questões e respostas
  questions Questions[]
  answers Answers[]
}

model Questions {
  id Int @default(autoincrement()) @id
  title String
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  // está "importando" a tabela user para fazer referência de um user.id através do campo userId (Equivalente ao SQLjoin)
  user User @relation(fields: [userId], references: [id])
  // Uma questão podem ter várias respostas
  answers Answers[]
}
model Answers {
  id Int @default(autoincrement()) @id
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  questionId Int
  // Faz referência a pergunta original e o usuário que enviou a resposta através de userId e questionId sendo 1:N
  user User @relation(fields: [userId], references: [id])
  question Questions @relation(fields: [questionId], references: [id])
}
